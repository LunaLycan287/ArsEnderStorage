buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven { url 'https://modmaven.dev/' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }

        mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }

}
plugins {
    id "org.sonarqube" version "3.0"
}

apply plugin: 'net.minecraftforge.gradle'


// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


version = mod_version
group = groupid // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = modid + '-' + mc_version

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.

    mappings channel: 'official', version: mc_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {

        client {
            workingDirectory project.file('run')

            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'ars_enderstorage', '--all', '--output', file('src/generated/resources/'), "--existing", "\"" +
                    sourceSets.main.resources.srcDirs[0] + "\""

            mods {
                ars_enderstorage {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    mavenCentral()
    mavenLocal()
}
dependencies {
    minecraft 'net.minecraftforge:forge:' + mc_version + '-' + forge_version
    runtimeOnly fg.deobf("curse.maven:exp-407174:3188120")  // Shutup experimental settings

    implementation fg.deobf("codechicken:CodeChickenLib:" + codechickenlib_version + ":universal")

    implementation fg.deobf("codechicken:EnderStorage:" + enderstorage_version + ":universal")

    runtimeOnly fg.deobf("curse.maven:exp-401955:" + arsnouveau_fileid)
    compileOnly fg.deobf("curse.maven:exp-401955:" + arsnouveau_fileid)

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:" + curios_version + ":api") // Curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:" + curios_version)

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:" + patchouli_version + ":api") // Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:" + patchouli_version)

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-' + geckolib_version) // Gecko Lib

    compileOnly fg.deobf("mezz.jei:jei-" + jei_version + ":api") // Just Enough Items
    runtimeOnly fg.deobf("mezz.jei:jei-" + jei_version)

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "ArsNouveau EnderStorage Addon",
                "Specification-Vendor"    : "Moonwolf287",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : "Moonwolf287",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
// Copied from Botania
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}